//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/BRG/Projekte/RosMessageParser/RosMessageParser\RosMessage.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Joanneum.Robotics.Ros.MessageParser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class RosMessageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, BOOL=6, INT8=7, UINT8=8, INT16=9, 
		UINT16=10, INT32=11, UINT32=12, INT64=13, UINT64=14, FLOAT32=15, FLOAT64=16, 
		STRING=17, TIME=18, DURATION=19, ASSIGNMENT=20, SHARP=21, WHITESPACES=22, 
		NEWLINES=23, IDENTIFIER=24, INTEGER_LITERAL=25, REAL_LITERAL=26, REGULAR_STRING=27, 
		COMMENT=28;
	public const int
		RULE_ros_message = 0, RULE_ros_message_element = 1, RULE_field_declaration = 2, 
		RULE_constant_declaration = 3, RULE_comment = 4, RULE_identifier = 5, 
		RULE_header_type = 6, RULE_type = 7, RULE_array_type = 8, RULE_variable_array_type = 9, 
		RULE_fixed_array_type = 10, RULE_external_message_type = 11, RULE_internal_message_type = 12, 
		RULE_numeric_type = 13, RULE_integral_type = 14, RULE_floating_point_type = 15, 
		RULE_temportal_type = 16;
	public static readonly string[] ruleNames = {
		"ros_message", "ros_message_element", "field_declaration", "constant_declaration", 
		"comment", "identifier", "header_type", "type", "array_type", "variable_array_type", 
		"fixed_array_type", "external_message_type", "internal_message_type", 
		"numeric_type", "integral_type", "floating_point_type", "temportal_type"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Header'", "'header'", "'['", "']'", "'/'", "'bool'", null, null, 
		"'int16'", "'uint16'", "'int32'", "'uint32'", "'int64'", "'uint64'", "'float32'", 
		"'float64'", "'string'", "'time'", "'duration'", "'='", "'#'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "BOOL", "INT8", "UINT8", "INT16", 
		"UINT16", "INT32", "UINT32", "INT64", "UINT64", "FLOAT32", "FLOAT64", 
		"STRING", "TIME", "DURATION", "ASSIGNMENT", "SHARP", "WHITESPACES", "NEWLINES", 
		"IDENTIFIER", "INTEGER_LITERAL", "REAL_LITERAL", "REGULAR_STRING", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RosMessage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static RosMessageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RosMessageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RosMessageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Ros_messageContext : ParserRuleContext {
		public Ros_message_elementContext[] ros_message_element() {
			return GetRuleContexts<Ros_message_elementContext>();
		}
		public Ros_message_elementContext ros_message_element(int i) {
			return GetRuleContext<Ros_message_elementContext>(i);
		}
		public ITerminalNode Eof() { return GetToken(RosMessageParser.Eof, 0); }
		public ITerminalNode[] NEWLINES() { return GetTokens(RosMessageParser.NEWLINES); }
		public ITerminalNode NEWLINES(int i) {
			return GetToken(RosMessageParser.NEWLINES, i);
		}
		public Ros_messageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ros_message; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterRos_message(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitRos_message(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRos_message(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ros_messageContext ros_message() {
		Ros_messageContext _localctx = new Ros_messageContext(Context, State);
		EnterRule(_localctx, 0, RULE_ros_message);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34; ros_message_element();
			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NEWLINES) {
				{
				{
				State = 35; Match(NEWLINES);
				State = 36; ros_message_element();
				}
				}
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 42; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ros_message_elementContext : ParserRuleContext {
		public Field_declarationContext field_declaration() {
			return GetRuleContext<Field_declarationContext>(0);
		}
		public Constant_declarationContext constant_declaration() {
			return GetRuleContext<Constant_declarationContext>(0);
		}
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public Ros_message_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ros_message_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterRos_message_element(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitRos_message_element(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRos_message_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ros_message_elementContext ros_message_element() {
		Ros_message_elementContext _localctx = new Ros_message_elementContext(Context, State);
		EnterRule(_localctx, 2, RULE_ros_message_element);
		try {
			State = 47;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 44; field_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 45; constant_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 46; comment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_declarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Array_typeContext array_type() {
			return GetRuleContext<Array_typeContext>(0);
		}
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public Header_typeContext header_type() {
			return GetRuleContext<Header_typeContext>(0);
		}
		public Field_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterField_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitField_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_declarationContext field_declaration() {
		Field_declarationContext _localctx = new Field_declarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_field_declaration);
		int _la;
		try {
			State = 61;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL:
			case INT8:
			case UINT8:
			case INT16:
			case UINT16:
			case INT32:
			case UINT32:
			case INT64:
			case UINT64:
			case FLOAT32:
			case FLOAT64:
			case STRING:
			case TIME:
			case DURATION:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 51;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 49; type();
					}
					break;
				case 2:
					{
					State = 50; array_type();
					}
					break;
				}
				State = 53; identifier();
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMENT) {
					{
					State = 54; comment();
					}
				}

				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 2);
				{
				State = 57; header_type();
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMENT) {
					{
					State = 58; comment();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_declarationContext : ParserRuleContext {
		public Integral_typeContext integral_type() {
			return GetRuleContext<Integral_typeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(RosMessageParser.ASSIGNMENT, 0); }
		public ITerminalNode INTEGER_LITERAL() { return GetToken(RosMessageParser.INTEGER_LITERAL, 0); }
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public Floating_point_typeContext floating_point_type() {
			return GetRuleContext<Floating_point_typeContext>(0);
		}
		public ITerminalNode REAL_LITERAL() { return GetToken(RosMessageParser.REAL_LITERAL, 0); }
		public ITerminalNode BOOL() { return GetToken(RosMessageParser.BOOL, 0); }
		public ITerminalNode STRING() { return GetToken(RosMessageParser.STRING, 0); }
		public ITerminalNode REGULAR_STRING() { return GetToken(RosMessageParser.REGULAR_STRING, 0); }
		public Constant_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterConstant_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitConstant_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_declarationContext constant_declaration() {
		Constant_declarationContext _localctx = new Constant_declarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_constant_declaration);
		int _la;
		try {
			State = 95;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT8:
			case UINT8:
			case INT16:
			case UINT16:
			case INT32:
			case UINT32:
			case INT64:
			case UINT64:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 63; integral_type();
				State = 64; identifier();
				State = 65; Match(ASSIGNMENT);
				State = 66; Match(INTEGER_LITERAL);
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMENT) {
					{
					State = 68; comment();
					}
				}

				}
				break;
			case FLOAT32:
			case FLOAT64:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 71; floating_point_type();
				State = 72; identifier();
				State = 73; Match(ASSIGNMENT);
				State = 74;
				_la = TokenStream.LA(1);
				if ( !(_la==INTEGER_LITERAL || _la==REAL_LITERAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMENT) {
					{
					State = 76; comment();
					}
				}

				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 79; Match(BOOL);
				State = 80; identifier();
				State = 81; Match(ASSIGNMENT);
				State = 82; Match(INTEGER_LITERAL);
				}
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMENT) {
					{
					State = 84; comment();
					}
				}

				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 87; Match(STRING);
				State = 88; identifier();
				State = 89; Match(ASSIGNMENT);
				State = 90; Match(REGULAR_STRING);
				}
				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMENT) {
					{
					State = 92; comment();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		public ITerminalNode COMMENT() { return GetToken(RosMessageParser.COMMENT, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 8, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97; Match(COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(RosMessageParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 10, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Header_typeContext : ParserRuleContext {
		public Header_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_header_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterHeader_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitHeader_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeader_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Header_typeContext header_type() {
		Header_typeContext _localctx = new Header_typeContext(Context, State);
		EnterRule(_localctx, 12, RULE_header_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; Match(T__0);
			State = 102; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public Numeric_typeContext numeric_type() {
			return GetRuleContext<Numeric_typeContext>(0);
		}
		public Temportal_typeContext temportal_type() {
			return GetRuleContext<Temportal_typeContext>(0);
		}
		public ITerminalNode BOOL() { return GetToken(RosMessageParser.BOOL, 0); }
		public ITerminalNode STRING() { return GetToken(RosMessageParser.STRING, 0); }
		public External_message_typeContext external_message_type() {
			return GetRuleContext<External_message_typeContext>(0);
		}
		public Internal_message_typeContext internal_message_type() {
			return GetRuleContext<Internal_message_typeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_type);
		try {
			State = 110;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 104; numeric_type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 105; temportal_type();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 106; Match(BOOL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 107; Match(STRING);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 108; external_message_type();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 109; internal_message_type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_typeContext : ParserRuleContext {
		public Variable_array_typeContext variable_array_type() {
			return GetRuleContext<Variable_array_typeContext>(0);
		}
		public Fixed_array_typeContext fixed_array_type() {
			return GetRuleContext<Fixed_array_typeContext>(0);
		}
		public Array_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterArray_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitArray_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_typeContext array_type() {
		Array_typeContext _localctx = new Array_typeContext(Context, State);
		EnterRule(_localctx, 16, RULE_array_type);
		try {
			State = 114;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 112; variable_array_type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 113; fixed_array_type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_array_typeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Variable_array_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_array_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterVariable_array_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitVariable_array_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_array_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_array_typeContext variable_array_type() {
		Variable_array_typeContext _localctx = new Variable_array_typeContext(Context, State);
		EnterRule(_localctx, 18, RULE_variable_array_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; type();
			State = 117; Match(T__2);
			State = 118; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_array_typeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode INTEGER_LITERAL() { return GetToken(RosMessageParser.INTEGER_LITERAL, 0); }
		public Fixed_array_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_array_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterFixed_array_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitFixed_array_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_array_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_array_typeContext fixed_array_type() {
		Fixed_array_typeContext _localctx = new Fixed_array_typeContext(Context, State);
		EnterRule(_localctx, 20, RULE_fixed_array_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120; type();
			State = 121; Match(T__2);
			State = 122; Match(INTEGER_LITERAL);
			State = 123; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class External_message_typeContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(RosMessageParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(RosMessageParser.IDENTIFIER, i);
		}
		public External_message_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_external_message_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterExternal_message_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitExternal_message_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternal_message_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public External_message_typeContext external_message_type() {
		External_message_typeContext _localctx = new External_message_typeContext(Context, State);
		EnterRule(_localctx, 22, RULE_external_message_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125; Match(IDENTIFIER);
			State = 126; Match(T__4);
			State = 127; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Internal_message_typeContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(RosMessageParser.IDENTIFIER, 0); }
		public Internal_message_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_internal_message_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterInternal_message_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitInternal_message_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInternal_message_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Internal_message_typeContext internal_message_type() {
		Internal_message_typeContext _localctx = new Internal_message_typeContext(Context, State);
		EnterRule(_localctx, 24, RULE_internal_message_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_typeContext : ParserRuleContext {
		public Integral_typeContext integral_type() {
			return GetRuleContext<Integral_typeContext>(0);
		}
		public Floating_point_typeContext floating_point_type() {
			return GetRuleContext<Floating_point_typeContext>(0);
		}
		public Numeric_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterNumeric_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitNumeric_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_typeContext numeric_type() {
		Numeric_typeContext _localctx = new Numeric_typeContext(Context, State);
		EnterRule(_localctx, 26, RULE_numeric_type);
		try {
			State = 133;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT8:
			case UINT8:
			case INT16:
			case UINT16:
			case INT32:
			case UINT32:
			case INT64:
			case UINT64:
				EnterOuterAlt(_localctx, 1);
				{
				State = 131; integral_type();
				}
				break;
			case FLOAT32:
			case FLOAT64:
				EnterOuterAlt(_localctx, 2);
				{
				State = 132; floating_point_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Integral_typeContext : ParserRuleContext {
		public ITerminalNode INT8() { return GetToken(RosMessageParser.INT8, 0); }
		public ITerminalNode UINT8() { return GetToken(RosMessageParser.UINT8, 0); }
		public ITerminalNode INT16() { return GetToken(RosMessageParser.INT16, 0); }
		public ITerminalNode UINT16() { return GetToken(RosMessageParser.UINT16, 0); }
		public ITerminalNode INT32() { return GetToken(RosMessageParser.INT32, 0); }
		public ITerminalNode UINT32() { return GetToken(RosMessageParser.UINT32, 0); }
		public ITerminalNode INT64() { return GetToken(RosMessageParser.INT64, 0); }
		public ITerminalNode UINT64() { return GetToken(RosMessageParser.UINT64, 0); }
		public Integral_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integral_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterIntegral_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitIntegral_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegral_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Integral_typeContext integral_type() {
		Integral_typeContext _localctx = new Integral_typeContext(Context, State);
		EnterRule(_localctx, 28, RULE_integral_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT8) | (1L << UINT8) | (1L << INT16) | (1L << UINT16) | (1L << INT32) | (1L << UINT32) | (1L << INT64) | (1L << UINT64))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Floating_point_typeContext : ParserRuleContext {
		public ITerminalNode FLOAT32() { return GetToken(RosMessageParser.FLOAT32, 0); }
		public ITerminalNode FLOAT64() { return GetToken(RosMessageParser.FLOAT64, 0); }
		public Floating_point_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floating_point_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterFloating_point_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitFloating_point_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloating_point_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Floating_point_typeContext floating_point_type() {
		Floating_point_typeContext _localctx = new Floating_point_typeContext(Context, State);
		EnterRule(_localctx, 30, RULE_floating_point_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			_la = TokenStream.LA(1);
			if ( !(_la==FLOAT32 || _la==FLOAT64) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Temportal_typeContext : ParserRuleContext {
		public ITerminalNode TIME() { return GetToken(RosMessageParser.TIME, 0); }
		public ITerminalNode DURATION() { return GetToken(RosMessageParser.DURATION, 0); }
		public Temportal_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_temportal_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterTemportal_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitTemportal_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemportal_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Temportal_typeContext temportal_type() {
		Temportal_typeContext _localctx = new Temportal_typeContext(Context, State);
		EnterRule(_localctx, 32, RULE_temportal_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			_la = TokenStream.LA(1);
			if ( !(_la==TIME || _la==DURATION) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1E', '\x90', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\a', '\x2', '(', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '+', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '\x32', '\n', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', '\x36', '\n', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', ':', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', 
		'\x4', '>', '\n', '\x4', '\x5', '\x4', '@', '\n', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', 'H', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'P', '\n', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', 'X', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'`', '\n', '\x5', '\x5', '\x5', '\x62', '\n', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x5', '\t', 'q', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x5', '\n', 
		'u', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x5', '\xF', '\x88', '\n', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x2', '\x2', '\x13', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '\x2', '\x6', '\x3', '\x2', '\x1B', '\x1C', '\x3', '\x2', '\t', 
		'\x10', '\x3', '\x2', '\x11', '\x12', '\x3', '\x2', '\x14', '\x15', '\x2', 
		'\x93', '\x2', '$', '\x3', '\x2', '\x2', '\x2', '\x4', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '?', '\x3', '\x2', '\x2', '\x2', '\b', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '\n', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\x65', '\x3', '\x2', '\x2', '\x2', '\xE', 'g', '\x3', '\x2', '\x2', 
		'\x2', '\x10', 'p', '\x3', '\x2', '\x2', '\x2', '\x12', 't', '\x3', '\x2', 
		'\x2', '\x2', '\x14', 'v', '\x3', '\x2', '\x2', '\x2', '\x16', 'z', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x89', '\x3', '\x2', '\x2', '\x2', ' ', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\"', '\x8D', '\x3', '\x2', '\x2', '\x2', '$', ')', 
		'\x5', '\x4', '\x3', '\x2', '%', '&', '\a', '\x19', '\x2', '\x2', '&', 
		'(', '\x5', '\x4', '\x3', '\x2', '\'', '%', '\x3', '\x2', '\x2', '\x2', 
		'(', '+', '\x3', '\x2', '\x2', '\x2', ')', '\'', '\x3', '\x2', '\x2', 
		'\x2', ')', '*', '\x3', '\x2', '\x2', '\x2', '*', ',', '\x3', '\x2', '\x2', 
		'\x2', '+', ')', '\x3', '\x2', '\x2', '\x2', ',', '-', '\a', '\x2', '\x2', 
		'\x3', '-', '\x3', '\x3', '\x2', '\x2', '\x2', '.', '\x32', '\x5', '\x6', 
		'\x4', '\x2', '/', '\x32', '\x5', '\b', '\x5', '\x2', '\x30', '\x32', 
		'\x5', '\n', '\x6', '\x2', '\x31', '.', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x31', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x5', '\x3', '\x2', '\x2', '\x2', '\x33', '\x36', '\x5', 
		'\x10', '\t', '\x2', '\x34', '\x36', '\x5', '\x12', '\n', '\x2', '\x35', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x35', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '\x37', '\x3', '\x2', '\x2', '\x2', '\x37', '\x39', '\x5', 
		'\f', '\a', '\x2', '\x38', ':', '\x5', '\n', '\x6', '\x2', '\x39', '\x38', 
		'\x3', '\x2', '\x2', '\x2', '\x39', ':', '\x3', '\x2', '\x2', '\x2', ':', 
		'@', '\x3', '\x2', '\x2', '\x2', ';', '=', '\x5', '\xE', '\b', '\x2', 
		'<', '>', '\x5', '\n', '\x6', '\x2', '=', '<', '\x3', '\x2', '\x2', '\x2', 
		'=', '>', '\x3', '\x2', '\x2', '\x2', '>', '@', '\x3', '\x2', '\x2', '\x2', 
		'?', '\x35', '\x3', '\x2', '\x2', '\x2', '?', ';', '\x3', '\x2', '\x2', 
		'\x2', '@', '\a', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\x5', '\x1E', 
		'\x10', '\x2', '\x42', '\x43', '\x5', '\f', '\a', '\x2', '\x43', '\x44', 
		'\a', '\x16', '\x2', '\x2', '\x44', '\x45', '\a', '\x1B', '\x2', '\x2', 
		'\x45', 'G', '\x3', '\x2', '\x2', '\x2', '\x46', 'H', '\x5', '\n', '\x6', 
		'\x2', 'G', '\x46', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x62', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x5', 
		' ', '\x11', '\x2', 'J', 'K', '\x5', '\f', '\a', '\x2', 'K', 'L', '\a', 
		'\x16', '\x2', '\x2', 'L', 'M', '\t', '\x2', '\x2', '\x2', 'M', 'O', '\x3', 
		'\x2', '\x2', '\x2', 'N', 'P', '\x5', '\n', '\x6', '\x2', 'O', 'N', '\x3', 
		'\x2', '\x2', '\x2', 'O', 'P', '\x3', '\x2', '\x2', '\x2', 'P', '\x62', 
		'\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\a', '\b', '\x2', '\x2', 'R', 'S', 
		'\x5', '\f', '\a', '\x2', 'S', 'T', '\a', '\x16', '\x2', '\x2', 'T', 'U', 
		'\a', '\x1B', '\x2', '\x2', 'U', 'W', '\x3', '\x2', '\x2', '\x2', 'V', 
		'X', '\x5', '\n', '\x6', '\x2', 'W', 'V', '\x3', '\x2', '\x2', '\x2', 
		'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', '\x62', '\x3', '\x2', '\x2', 
		'\x2', 'Y', 'Z', '\a', '\x13', '\x2', '\x2', 'Z', '[', '\x5', '\f', '\a', 
		'\x2', '[', '\\', '\a', '\x16', '\x2', '\x2', '\\', ']', '\a', '\x1D', 
		'\x2', '\x2', ']', '_', '\x3', '\x2', '\x2', '\x2', '^', '`', '\x5', '\n', 
		'\x6', '\x2', '_', '^', '\x3', '\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x62', '\x3', '\x2', '\x2', '\x2', '\x61', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x61', 'I', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'Q', '\x3', '\x2', '\x2', '\x2', '\x61', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\t', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\a', '\x1E', 
		'\x2', '\x2', '\x64', '\v', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', 
		'\a', '\x1A', '\x2', '\x2', '\x66', '\r', '\x3', '\x2', '\x2', '\x2', 
		'g', 'h', '\a', '\x3', '\x2', '\x2', 'h', 'i', '\a', '\x4', '\x2', '\x2', 
		'i', '\xF', '\x3', '\x2', '\x2', '\x2', 'j', 'q', '\x5', '\x1C', '\xF', 
		'\x2', 'k', 'q', '\x5', '\"', '\x12', '\x2', 'l', 'q', '\a', '\b', '\x2', 
		'\x2', 'm', 'q', '\a', '\x13', '\x2', '\x2', 'n', 'q', '\x5', '\x18', 
		'\r', '\x2', 'o', 'q', '\x5', '\x1A', '\xE', '\x2', 'p', 'j', '\x3', '\x2', 
		'\x2', '\x2', 'p', 'k', '\x3', '\x2', '\x2', '\x2', 'p', 'l', '\x3', '\x2', 
		'\x2', '\x2', 'p', 'm', '\x3', '\x2', '\x2', '\x2', 'p', 'n', '\x3', '\x2', 
		'\x2', '\x2', 'p', 'o', '\x3', '\x2', '\x2', '\x2', 'q', '\x11', '\x3', 
		'\x2', '\x2', '\x2', 'r', 'u', '\x5', '\x14', '\v', '\x2', 's', 'u', '\x5', 
		'\x16', '\f', '\x2', 't', 'r', '\x3', '\x2', '\x2', '\x2', 't', 's', '\x3', 
		'\x2', '\x2', '\x2', 'u', '\x13', '\x3', '\x2', '\x2', '\x2', 'v', 'w', 
		'\x5', '\x10', '\t', '\x2', 'w', 'x', '\a', '\x5', '\x2', '\x2', 'x', 
		'y', '\a', '\x6', '\x2', '\x2', 'y', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'z', '{', '\x5', '\x10', '\t', '\x2', '{', '|', '\a', '\x5', '\x2', '\x2', 
		'|', '}', '\a', '\x1B', '\x2', '\x2', '}', '~', '\a', '\x6', '\x2', '\x2', 
		'~', '\x17', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', '\a', '\x1A', 
		'\x2', '\x2', '\x80', '\x81', '\a', '\a', '\x2', '\x2', '\x81', '\x82', 
		'\a', '\x1A', '\x2', '\x2', '\x82', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x83', '\x84', '\a', '\x1A', '\x2', '\x2', '\x84', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\x85', '\x88', '\x5', '\x1E', '\x10', '\x2', '\x86', '\x88', 
		'\x5', ' ', '\x11', '\x2', '\x87', '\x85', '\x3', '\x2', '\x2', '\x2', 
		'\x87', '\x86', '\x3', '\x2', '\x2', '\x2', '\x88', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x89', '\x8A', '\t', '\x3', '\x2', '\x2', '\x8A', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\t', '\x4', '\x2', '\x2', 
		'\x8C', '!', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\t', '\x5', 
		'\x2', '\x2', '\x8E', '#', '\x3', '\x2', '\x2', '\x2', '\x10', ')', '\x31', 
		'\x35', '\x39', '=', '?', 'G', 'O', 'W', '_', '\x61', 'p', 't', '\x87',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Joanneum.Robotics.Ros.MessageParser
