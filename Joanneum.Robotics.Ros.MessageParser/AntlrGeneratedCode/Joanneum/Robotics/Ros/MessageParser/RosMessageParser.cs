//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/BRG/Projekte/RosMessageParser/Joanneum.Robotics.Ros.MessageParser\RosMessage.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Joanneum.Robotics.Ros.MessageParser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class RosMessageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, BOOL=5, INT8=6, UINT8=7, INT16=8, UINT16=9, 
		INT32=10, UINT32=11, INT64=12, UINT64=13, FLOAT32=14, FLOAT64=15, STRING=16, 
		TIME=17, DURATION=18, ASSIGNMENT=19, PLUS=20, MINUS=21, SHARP=22, TRUE=23, 
		FALSE=24, MESSAGE_SEPARATOR=25, NEWLINE=26, IDENTIFIER=27, INTEGER_LITERAL=28, 
		REAL_LITERAL=29, STRING_CONST_ASSIGNMENT=30, COMMENT=31, ROSBAG_MESSAGE_SEPARATOR=32, 
		WHITESPACES=33;
	public const int
		RULE_ros_file_input = 0, RULE_ros_message = 1, RULE_ros_action = 2, RULE_ros_service = 3, 
		RULE_rosbag_input = 4, RULE_rosbag_nested_message = 5, RULE_linebreaks = 6, 
		RULE_field_declaration = 7, RULE_constant_declaration = 8, RULE_comment = 9, 
		RULE_identifier = 10, RULE_type = 11, RULE_base_type = 12, RULE_ros_type = 13, 
		RULE_array_type = 14, RULE_variable_array_type = 15, RULE_fixed_array_type = 16, 
		RULE_numeric_type = 17, RULE_integral_type = 18, RULE_floating_point_type = 19, 
		RULE_temportal_type = 20, RULE_string_type = 21, RULE_boolean_type = 22, 
		RULE_sign = 23, RULE_integral_value = 24, RULE_floating_point_value = 25, 
		RULE_bool_value = 26;
	public static readonly string[] ruleNames = {
		"ros_file_input", "ros_message", "ros_action", "ros_service", "rosbag_input", 
		"rosbag_nested_message", "linebreaks", "field_declaration", "constant_declaration", 
		"comment", "identifier", "type", "base_type", "ros_type", "array_type", 
		"variable_array_type", "fixed_array_type", "numeric_type", "integral_type", 
		"floating_point_type", "temportal_type", "string_type", "boolean_type", 
		"sign", "integral_value", "floating_point_value", "bool_value"
	};

	private static readonly string[] _LiteralNames = {
		null, "'MSG:'", "'/'", "'['", "']'", "'bool'", null, null, "'int16'", 
		"'uint16'", "'int32'", "'uint32'", "'int64'", "'uint64'", "'float32'", 
		"'float64'", "'string'", "'time'", "'duration'", "'='", "'+'", "'-'", 
		"'#'", "'True'", "'False'", "'---'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "BOOL", "INT8", "UINT8", "INT16", "UINT16", 
		"INT32", "UINT32", "INT64", "UINT64", "FLOAT32", "FLOAT64", "STRING", 
		"TIME", "DURATION", "ASSIGNMENT", "PLUS", "MINUS", "SHARP", "TRUE", "FALSE", 
		"MESSAGE_SEPARATOR", "NEWLINE", "IDENTIFIER", "INTEGER_LITERAL", "REAL_LITERAL", 
		"STRING_CONST_ASSIGNMENT", "COMMENT", "ROSBAG_MESSAGE_SEPARATOR", "WHITESPACES"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RosMessage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static RosMessageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RosMessageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RosMessageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Ros_file_inputContext : ParserRuleContext {
		public Ros_messageContext ros_message() {
			return GetRuleContext<Ros_messageContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(RosMessageParser.Eof, 0); }
		public Ros_actionContext ros_action() {
			return GetRuleContext<Ros_actionContext>(0);
		}
		public Ros_serviceContext ros_service() {
			return GetRuleContext<Ros_serviceContext>(0);
		}
		public Ros_file_inputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ros_file_input; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterRos_file_input(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitRos_file_input(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRos_file_input(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ros_file_inputContext ros_file_input() {
		Ros_file_inputContext _localctx = new Ros_file_inputContext(Context, State);
		EnterRule(_localctx, 0, RULE_ros_file_input);
		try {
			State = 63;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 54; ros_message();
				State = 55; Match(Eof);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 57; ros_action();
				State = 58; Match(Eof);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 60; ros_service();
				State = 61; Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ros_messageContext : ParserRuleContext {
		public LinebreaksContext[] linebreaks() {
			return GetRuleContexts<LinebreaksContext>();
		}
		public LinebreaksContext linebreaks(int i) {
			return GetRuleContext<LinebreaksContext>(i);
		}
		public Field_declarationContext[] field_declaration() {
			return GetRuleContexts<Field_declarationContext>();
		}
		public Field_declarationContext field_declaration(int i) {
			return GetRuleContext<Field_declarationContext>(i);
		}
		public Constant_declarationContext[] constant_declaration() {
			return GetRuleContexts<Constant_declarationContext>();
		}
		public Constant_declarationContext constant_declaration(int i) {
			return GetRuleContext<Constant_declarationContext>(i);
		}
		public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public Ros_messageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ros_message; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterRos_message(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitRos_message(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRos_message(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ros_messageContext ros_message() {
		Ros_messageContext _localctx = new Ros_messageContext(Context, State);
		EnterRule(_localctx, 2, RULE_ros_message);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 69;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 65; linebreaks();
					}
					break;
				case 2:
					{
					State = 66; field_declaration();
					}
					break;
				case 3:
					{
					State = 67; constant_declaration();
					}
					break;
				case 4:
					{
					State = 68; comment();
					}
					break;
				}
				}
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOL) | (1L << INT8) | (1L << UINT8) | (1L << INT16) | (1L << UINT16) | (1L << INT32) | (1L << UINT32) | (1L << INT64) | (1L << UINT64) | (1L << FLOAT32) | (1L << FLOAT64) | (1L << STRING) | (1L << TIME) | (1L << DURATION) | (1L << NEWLINE) | (1L << IDENTIFIER) | (1L << COMMENT))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ros_actionContext : ParserRuleContext {
		public Ros_messageContext[] ros_message() {
			return GetRuleContexts<Ros_messageContext>();
		}
		public Ros_messageContext ros_message(int i) {
			return GetRuleContext<Ros_messageContext>(i);
		}
		public ITerminalNode[] MESSAGE_SEPARATOR() { return GetTokens(RosMessageParser.MESSAGE_SEPARATOR); }
		public ITerminalNode MESSAGE_SEPARATOR(int i) {
			return GetToken(RosMessageParser.MESSAGE_SEPARATOR, i);
		}
		public Ros_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ros_action; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterRos_action(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitRos_action(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRos_action(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ros_actionContext ros_action() {
		Ros_actionContext _localctx = new Ros_actionContext(Context, State);
		EnterRule(_localctx, 4, RULE_ros_action);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73; ros_message();
			State = 74; Match(MESSAGE_SEPARATOR);
			State = 75; ros_message();
			State = 76; Match(MESSAGE_SEPARATOR);
			State = 77; ros_message();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ros_serviceContext : ParserRuleContext {
		public Ros_messageContext[] ros_message() {
			return GetRuleContexts<Ros_messageContext>();
		}
		public Ros_messageContext ros_message(int i) {
			return GetRuleContext<Ros_messageContext>(i);
		}
		public ITerminalNode MESSAGE_SEPARATOR() { return GetToken(RosMessageParser.MESSAGE_SEPARATOR, 0); }
		public Ros_serviceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ros_service; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterRos_service(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitRos_service(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRos_service(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ros_serviceContext ros_service() {
		Ros_serviceContext _localctx = new Ros_serviceContext(Context, State);
		EnterRule(_localctx, 6, RULE_ros_service);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79; ros_message();
			State = 80; Match(MESSAGE_SEPARATOR);
			State = 81; ros_message();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rosbag_inputContext : ParserRuleContext {
		public Ros_messageContext ros_message() {
			return GetRuleContext<Ros_messageContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(RosMessageParser.Eof, 0); }
		public Rosbag_nested_messageContext[] rosbag_nested_message() {
			return GetRuleContexts<Rosbag_nested_messageContext>();
		}
		public Rosbag_nested_messageContext rosbag_nested_message(int i) {
			return GetRuleContext<Rosbag_nested_messageContext>(i);
		}
		public Rosbag_inputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rosbag_input; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterRosbag_input(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitRosbag_input(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRosbag_input(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rosbag_inputContext rosbag_input() {
		Rosbag_inputContext _localctx = new Rosbag_inputContext(Context, State);
		EnterRule(_localctx, 8, RULE_rosbag_input);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83; ros_message();
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 84; rosbag_nested_message();
				}
				}
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 90; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rosbag_nested_messageContext : ParserRuleContext {
		public Ros_typeContext ros_type() {
			return GetRuleContext<Ros_typeContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(RosMessageParser.NEWLINE, 0); }
		public Ros_messageContext ros_message() {
			return GetRuleContext<Ros_messageContext>(0);
		}
		public Rosbag_nested_messageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rosbag_nested_message; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterRosbag_nested_message(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitRosbag_nested_message(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRosbag_nested_message(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rosbag_nested_messageContext rosbag_nested_message() {
		Rosbag_nested_messageContext _localctx = new Rosbag_nested_messageContext(Context, State);
		EnterRule(_localctx, 10, RULE_rosbag_nested_message);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; Match(T__0);
			State = 93; ros_type();
			State = 94; Match(NEWLINE);
			State = 95; ros_message();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinebreaksContext : ParserRuleContext {
		public ITerminalNode[] NEWLINE() { return GetTokens(RosMessageParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(RosMessageParser.NEWLINE, i);
		}
		public LinebreaksContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linebreaks; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterLinebreaks(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitLinebreaks(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLinebreaks(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinebreaksContext linebreaks() {
		LinebreaksContext _localctx = new LinebreaksContext(Context, State);
		EnterRule(_localctx, 12, RULE_linebreaks);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 97; Match(NEWLINE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 100;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_declarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Array_typeContext array_type() {
			return GetRuleContext<Array_typeContext>(0);
		}
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public Field_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterField_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitField_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_declarationContext field_declaration() {
		Field_declarationContext _localctx = new Field_declarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_field_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 102; type();
				}
				break;
			case 2:
				{
				State = 103; array_type();
				}
				break;
			}
			State = 106; identifier();
			State = 108;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 107; comment();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_declarationContext : ParserRuleContext {
		public Integral_typeContext integral_type() {
			return GetRuleContext<Integral_typeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(RosMessageParser.ASSIGNMENT, 0); }
		public Integral_valueContext integral_value() {
			return GetRuleContext<Integral_valueContext>(0);
		}
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public Floating_point_typeContext floating_point_type() {
			return GetRuleContext<Floating_point_typeContext>(0);
		}
		public Floating_point_valueContext floating_point_value() {
			return GetRuleContext<Floating_point_valueContext>(0);
		}
		public Boolean_typeContext boolean_type() {
			return GetRuleContext<Boolean_typeContext>(0);
		}
		public Bool_valueContext bool_value() {
			return GetRuleContext<Bool_valueContext>(0);
		}
		public String_typeContext string_type() {
			return GetRuleContext<String_typeContext>(0);
		}
		public ITerminalNode STRING_CONST_ASSIGNMENT() { return GetToken(RosMessageParser.STRING_CONST_ASSIGNMENT, 0); }
		public Constant_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterConstant_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitConstant_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_declarationContext constant_declaration() {
		Constant_declarationContext _localctx = new Constant_declarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_constant_declaration);
		try {
			State = 141;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT8:
			case UINT8:
			case INT16:
			case UINT16:
			case INT32:
			case UINT32:
			case INT64:
			case UINT64:
				EnterOuterAlt(_localctx, 1);
				{
				State = 110; integral_type();
				State = 111; identifier();
				State = 112; Match(ASSIGNMENT);
				State = 113; integral_value();
				State = 115;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 114; comment();
					}
					break;
				}
				}
				break;
			case FLOAT32:
			case FLOAT64:
				EnterOuterAlt(_localctx, 2);
				{
				State = 117; floating_point_type();
				State = 118; identifier();
				State = 119; Match(ASSIGNMENT);
				State = 122;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 120; integral_value();
					}
					break;
				case 2:
					{
					State = 121; floating_point_value();
					}
					break;
				}
				State = 125;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 124; comment();
					}
					break;
				}
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 127; boolean_type();
				State = 128; identifier();
				State = 129; Match(ASSIGNMENT);
				State = 132;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TRUE:
				case FALSE:
					{
					State = 130; bool_value();
					}
					break;
				case PLUS:
				case MINUS:
				case INTEGER_LITERAL:
					{
					State = 131; integral_value();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 135;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 134; comment();
					}
					break;
				}
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 137; string_type();
				State = 138; identifier();
				State = 139; Match(STRING_CONST_ASSIGNMENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		public ITerminalNode COMMENT() { return GetToken(RosMessageParser.COMMENT, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 18, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143; Match(COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(RosMessageParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 20, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public Base_typeContext base_type() {
			return GetRuleContext<Base_typeContext>(0);
		}
		public Ros_typeContext ros_type() {
			return GetRuleContext<Ros_typeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 22, RULE_type);
		try {
			State = 149;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL:
			case INT8:
			case UINT8:
			case INT16:
			case UINT16:
			case INT32:
			case UINT32:
			case INT64:
			case UINT64:
			case FLOAT32:
			case FLOAT64:
			case STRING:
			case TIME:
			case DURATION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 147; base_type();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 148; ros_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_typeContext : ParserRuleContext {
		public Numeric_typeContext numeric_type() {
			return GetRuleContext<Numeric_typeContext>(0);
		}
		public Temportal_typeContext temportal_type() {
			return GetRuleContext<Temportal_typeContext>(0);
		}
		public Boolean_typeContext boolean_type() {
			return GetRuleContext<Boolean_typeContext>(0);
		}
		public String_typeContext string_type() {
			return GetRuleContext<String_typeContext>(0);
		}
		public Base_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterBase_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitBase_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBase_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Base_typeContext base_type() {
		Base_typeContext _localctx = new Base_typeContext(Context, State);
		EnterRule(_localctx, 24, RULE_base_type);
		try {
			State = 155;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT8:
			case UINT8:
			case INT16:
			case UINT16:
			case INT32:
			case UINT32:
			case INT64:
			case UINT64:
			case FLOAT32:
			case FLOAT64:
				EnterOuterAlt(_localctx, 1);
				{
				State = 151; numeric_type();
				}
				break;
			case TIME:
			case DURATION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 152; temportal_type();
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 153; boolean_type();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 154; string_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ros_typeContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(RosMessageParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(RosMessageParser.IDENTIFIER, i);
		}
		public Ros_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ros_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterRos_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitRos_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRos_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ros_typeContext ros_type() {
		Ros_typeContext _localctx = new Ros_typeContext(Context, State);
		EnterRule(_localctx, 26, RULE_ros_type);
		try {
			State = 161;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 157; Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 158; Match(IDENTIFIER);
				State = 159; Match(T__1);
				State = 160; Match(IDENTIFIER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_typeContext : ParserRuleContext {
		public Variable_array_typeContext variable_array_type() {
			return GetRuleContext<Variable_array_typeContext>(0);
		}
		public Fixed_array_typeContext fixed_array_type() {
			return GetRuleContext<Fixed_array_typeContext>(0);
		}
		public Array_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterArray_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitArray_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_typeContext array_type() {
		Array_typeContext _localctx = new Array_typeContext(Context, State);
		EnterRule(_localctx, 28, RULE_array_type);
		try {
			State = 165;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 163; variable_array_type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 164; fixed_array_type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_array_typeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Variable_array_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_array_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterVariable_array_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitVariable_array_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_array_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_array_typeContext variable_array_type() {
		Variable_array_typeContext _localctx = new Variable_array_typeContext(Context, State);
		EnterRule(_localctx, 30, RULE_variable_array_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167; type();
			State = 168; Match(T__2);
			State = 169; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_array_typeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode INTEGER_LITERAL() { return GetToken(RosMessageParser.INTEGER_LITERAL, 0); }
		public Fixed_array_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_array_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterFixed_array_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitFixed_array_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_array_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_array_typeContext fixed_array_type() {
		Fixed_array_typeContext _localctx = new Fixed_array_typeContext(Context, State);
		EnterRule(_localctx, 32, RULE_fixed_array_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171; type();
			State = 172; Match(T__2);
			State = 173; Match(INTEGER_LITERAL);
			State = 174; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_typeContext : ParserRuleContext {
		public Integral_typeContext integral_type() {
			return GetRuleContext<Integral_typeContext>(0);
		}
		public Floating_point_typeContext floating_point_type() {
			return GetRuleContext<Floating_point_typeContext>(0);
		}
		public Numeric_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterNumeric_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitNumeric_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_typeContext numeric_type() {
		Numeric_typeContext _localctx = new Numeric_typeContext(Context, State);
		EnterRule(_localctx, 34, RULE_numeric_type);
		try {
			State = 178;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT8:
			case UINT8:
			case INT16:
			case UINT16:
			case INT32:
			case UINT32:
			case INT64:
			case UINT64:
				EnterOuterAlt(_localctx, 1);
				{
				State = 176; integral_type();
				}
				break;
			case FLOAT32:
			case FLOAT64:
				EnterOuterAlt(_localctx, 2);
				{
				State = 177; floating_point_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Integral_typeContext : ParserRuleContext {
		public ITerminalNode INT8() { return GetToken(RosMessageParser.INT8, 0); }
		public ITerminalNode UINT8() { return GetToken(RosMessageParser.UINT8, 0); }
		public ITerminalNode INT16() { return GetToken(RosMessageParser.INT16, 0); }
		public ITerminalNode UINT16() { return GetToken(RosMessageParser.UINT16, 0); }
		public ITerminalNode INT32() { return GetToken(RosMessageParser.INT32, 0); }
		public ITerminalNode UINT32() { return GetToken(RosMessageParser.UINT32, 0); }
		public ITerminalNode INT64() { return GetToken(RosMessageParser.INT64, 0); }
		public ITerminalNode UINT64() { return GetToken(RosMessageParser.UINT64, 0); }
		public Integral_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integral_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterIntegral_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitIntegral_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegral_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Integral_typeContext integral_type() {
		Integral_typeContext _localctx = new Integral_typeContext(Context, State);
		EnterRule(_localctx, 36, RULE_integral_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT8) | (1L << UINT8) | (1L << INT16) | (1L << UINT16) | (1L << INT32) | (1L << UINT32) | (1L << INT64) | (1L << UINT64))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Floating_point_typeContext : ParserRuleContext {
		public ITerminalNode FLOAT32() { return GetToken(RosMessageParser.FLOAT32, 0); }
		public ITerminalNode FLOAT64() { return GetToken(RosMessageParser.FLOAT64, 0); }
		public Floating_point_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floating_point_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterFloating_point_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitFloating_point_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloating_point_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Floating_point_typeContext floating_point_type() {
		Floating_point_typeContext _localctx = new Floating_point_typeContext(Context, State);
		EnterRule(_localctx, 38, RULE_floating_point_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			_la = TokenStream.LA(1);
			if ( !(_la==FLOAT32 || _la==FLOAT64) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Temportal_typeContext : ParserRuleContext {
		public ITerminalNode TIME() { return GetToken(RosMessageParser.TIME, 0); }
		public ITerminalNode DURATION() { return GetToken(RosMessageParser.DURATION, 0); }
		public Temportal_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_temportal_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterTemportal_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitTemportal_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemportal_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Temportal_typeContext temportal_type() {
		Temportal_typeContext _localctx = new Temportal_typeContext(Context, State);
		EnterRule(_localctx, 40, RULE_temportal_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			_la = TokenStream.LA(1);
			if ( !(_la==TIME || _la==DURATION) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_typeContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(RosMessageParser.STRING, 0); }
		public String_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterString_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitString_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_typeContext string_type() {
		String_typeContext _localctx = new String_typeContext(Context, State);
		EnterRule(_localctx, 42, RULE_string_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_typeContext : ParserRuleContext {
		public ITerminalNode BOOL() { return GetToken(RosMessageParser.BOOL, 0); }
		public Boolean_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterBoolean_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitBoolean_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_typeContext boolean_type() {
		Boolean_typeContext _localctx = new Boolean_typeContext(Context, State);
		EnterRule(_localctx, 44, RULE_boolean_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188; Match(BOOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(RosMessageParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(RosMessageParser.MINUS, 0); }
		public SignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterSign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitSign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignContext sign() {
		SignContext _localctx = new SignContext(Context, State);
		EnterRule(_localctx, 46, RULE_sign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Integral_valueContext : ParserRuleContext {
		public ITerminalNode INTEGER_LITERAL() { return GetToken(RosMessageParser.INTEGER_LITERAL, 0); }
		public SignContext sign() {
			return GetRuleContext<SignContext>(0);
		}
		public Integral_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integral_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterIntegral_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitIntegral_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegral_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Integral_valueContext integral_value() {
		Integral_valueContext _localctx = new Integral_valueContext(Context, State);
		EnterRule(_localctx, 48, RULE_integral_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 192; sign();
				}
			}

			State = 195; Match(INTEGER_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Floating_point_valueContext : ParserRuleContext {
		public ITerminalNode REAL_LITERAL() { return GetToken(RosMessageParser.REAL_LITERAL, 0); }
		public SignContext sign() {
			return GetRuleContext<SignContext>(0);
		}
		public Floating_point_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floating_point_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterFloating_point_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitFloating_point_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloating_point_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Floating_point_valueContext floating_point_value() {
		Floating_point_valueContext _localctx = new Floating_point_valueContext(Context, State);
		EnterRule(_localctx, 50, RULE_floating_point_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 197; sign();
				}
			}

			State = 200; Match(REAL_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_valueContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(RosMessageParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(RosMessageParser.FALSE, 0); }
		public Bool_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.EnterBool_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageListener typedListener = listener as IRosMessageListener;
			if (typedListener != null) typedListener.ExitBool_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageVisitor<TResult> typedVisitor = visitor as IRosMessageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bool_valueContext bool_value() {
		Bool_valueContext _localctx = new Bool_valueContext(Context, State);
		EnterRule(_localctx, 52, RULE_bool_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '#', '\xCF', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '\x42', '\n', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x6', '\x3', 
		'H', '\n', '\x3', '\r', '\x3', '\xE', '\x3', 'I', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\a', '\x6', 'X', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '[', 
		'\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x6', '\b', '\x65', '\n', 
		'\b', '\r', '\b', '\xE', '\b', '\x66', '\x3', '\t', '\x3', '\t', '\x5', 
		'\t', 'k', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 'o', '\n', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x5', '\n', 'v', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x5', '\n', '}', '\n', '\n', '\x3', '\n', '\x5', '\n', 
		'\x80', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x5', '\n', '\x87', '\n', '\n', '\x3', '\n', '\x5', '\n', 
		'\x8A', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x5', '\n', '\x90', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x98', '\n', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 
		'\x9E', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x5', '\xF', '\xA4', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x5', '\x10', '\xA8', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xB5', 
		'\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x5', '\x1A', 
		'\xC4', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x5', 
		'\x1B', '\xC9', '\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x2', '\x2', '\x1D', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', 
		'\x34', '\x36', '\x2', '\a', '\x3', '\x2', '\b', '\xF', '\x3', '\x2', 
		'\x10', '\x11', '\x3', '\x2', '\x13', '\x14', '\x3', '\x2', '\x16', '\x17', 
		'\x3', '\x2', '\x19', '\x1A', '\x2', '\xCE', '\x2', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\x4', 'G', '\x3', '\x2', '\x2', '\x2', '\x6', 'K', '\x3', 
		'\x2', '\x2', '\x2', '\b', 'Q', '\x3', '\x2', '\x2', '\x2', '\n', 'U', 
		'\x3', '\x2', '\x2', '\x2', '\f', '^', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\x64', '\x3', '\x2', '\x2', '\x2', '\x10', 'j', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x14', '\x91', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x93', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\xA3', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\xA9', '\x3', '\x2', '\x2', '\x2', '\"', '\xAD', 
		'\x3', '\x2', '\x2', '\x2', '$', '\xB4', '\x3', '\x2', '\x2', '\x2', '&', 
		'\xB6', '\x3', '\x2', '\x2', '\x2', '(', '\xB8', '\x3', '\x2', '\x2', 
		'\x2', '*', '\xBA', '\x3', '\x2', '\x2', '\x2', ',', '\xBC', '\x3', '\x2', 
		'\x2', '\x2', '.', '\xBE', '\x3', '\x2', '\x2', '\x2', '\x30', '\xC0', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\xC3', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\xC8', '\x3', '\x2', '\x2', '\x2', '\x36', '\xCC', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x39', '\x5', '\x4', '\x3', '\x2', '\x39', ':', 
		'\a', '\x2', '\x2', '\x3', ':', '\x42', '\x3', '\x2', '\x2', '\x2', ';', 
		'<', '\x5', '\x6', '\x4', '\x2', '<', '=', '\a', '\x2', '\x2', '\x3', 
		'=', '\x42', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x5', '\b', '\x5', 
		'\x2', '?', '@', '\a', '\x2', '\x2', '\x3', '@', '\x42', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '\x38', '\x3', '\x2', '\x2', '\x2', '\x41', ';', 
		'\x3', '\x2', '\x2', '\x2', '\x41', '>', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\x43', 'H', '\x5', '\xE', '\b', '\x2', 
		'\x44', 'H', '\x5', '\x10', '\t', '\x2', '\x45', 'H', '\x5', '\x12', '\n', 
		'\x2', '\x46', 'H', '\x5', '\x14', '\v', '\x2', 'G', '\x43', '\x3', '\x2', 
		'\x2', '\x2', 'G', '\x44', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', '\x3', 
		'\x2', '\x2', '\x2', 'G', '\x46', '\x3', '\x2', '\x2', '\x2', 'H', 'I', 
		'\x3', '\x2', '\x2', '\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 'I', 
		'J', '\x3', '\x2', '\x2', '\x2', 'J', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'K', 'L', '\x5', '\x4', '\x3', '\x2', 'L', 'M', '\a', '\x1B', '\x2', '\x2', 
		'M', 'N', '\x5', '\x4', '\x3', '\x2', 'N', 'O', '\a', '\x1B', '\x2', '\x2', 
		'O', 'P', '\x5', '\x4', '\x3', '\x2', 'P', '\a', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'R', '\x5', '\x4', '\x3', '\x2', 'R', 'S', '\a', '\x1B', '\x2', 
		'\x2', 'S', 'T', '\x5', '\x4', '\x3', '\x2', 'T', '\t', '\x3', '\x2', 
		'\x2', '\x2', 'U', 'Y', '\x5', '\x4', '\x3', '\x2', 'V', 'X', '\x5', '\f', 
		'\a', '\x2', 'W', 'V', '\x3', '\x2', '\x2', '\x2', 'X', '[', '\x3', '\x2', 
		'\x2', '\x2', 'Y', 'W', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\\', '\x3', '\x2', '\x2', '\x2', '[', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '\\', ']', '\a', '\x2', '\x2', '\x3', ']', '\v', 
		'\x3', '\x2', '\x2', '\x2', '^', '_', '\a', '\x3', '\x2', '\x2', '_', 
		'`', '\x5', '\x1C', '\xF', '\x2', '`', '\x61', '\a', '\x1C', '\x2', '\x2', 
		'\x61', '\x62', '\x5', '\x4', '\x3', '\x2', '\x62', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\x63', '\x65', '\a', '\x1C', '\x2', '\x2', '\x64', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\x3', '\x2', '\x2', '\x2', 
		'\x66', '\x64', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\x3', '\x2', 
		'\x2', '\x2', 'g', '\xF', '\x3', '\x2', '\x2', '\x2', 'h', 'k', '\x5', 
		'\x18', '\r', '\x2', 'i', 'k', '\x5', '\x1E', '\x10', '\x2', 'j', 'h', 
		'\x3', '\x2', '\x2', '\x2', 'j', 'i', '\x3', '\x2', '\x2', '\x2', 'k', 
		'l', '\x3', '\x2', '\x2', '\x2', 'l', 'n', '\x5', '\x16', '\f', '\x2', 
		'm', 'o', '\x5', '\x14', '\v', '\x2', 'n', 'm', '\x3', '\x2', '\x2', '\x2', 
		'n', 'o', '\x3', '\x2', '\x2', '\x2', 'o', '\x11', '\x3', '\x2', '\x2', 
		'\x2', 'p', 'q', '\x5', '&', '\x14', '\x2', 'q', 'r', '\x5', '\x16', '\f', 
		'\x2', 'r', 's', '\a', '\x15', '\x2', '\x2', 's', 'u', '\x5', '\x32', 
		'\x1A', '\x2', 't', 'v', '\x5', '\x14', '\v', '\x2', 'u', 't', '\x3', 
		'\x2', '\x2', '\x2', 'u', 'v', '\x3', '\x2', '\x2', '\x2', 'v', '\x90', 
		'\x3', '\x2', '\x2', '\x2', 'w', 'x', '\x5', '(', '\x15', '\x2', 'x', 
		'y', '\x5', '\x16', '\f', '\x2', 'y', '|', '\a', '\x15', '\x2', '\x2', 
		'z', '}', '\x5', '\x32', '\x1A', '\x2', '{', '}', '\x5', '\x34', '\x1B', 
		'\x2', '|', 'z', '\x3', '\x2', '\x2', '\x2', '|', '{', '\x3', '\x2', '\x2', 
		'\x2', '}', '\x7F', '\x3', '\x2', '\x2', '\x2', '~', '\x80', '\x5', '\x14', 
		'\v', '\x2', '\x7F', '~', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '\x90', '\x3', '\x2', '\x2', '\x2', 
		'\x81', '\x82', '\x5', '.', '\x18', '\x2', '\x82', '\x83', '\x5', '\x16', 
		'\f', '\x2', '\x83', '\x86', '\a', '\x15', '\x2', '\x2', '\x84', '\x87', 
		'\x5', '\x36', '\x1C', '\x2', '\x85', '\x87', '\x5', '\x32', '\x1A', '\x2', 
		'\x86', '\x84', '\x3', '\x2', '\x2', '\x2', '\x86', '\x85', '\x3', '\x2', 
		'\x2', '\x2', '\x87', '\x89', '\x3', '\x2', '\x2', '\x2', '\x88', '\x8A', 
		'\x5', '\x14', '\v', '\x2', '\x89', '\x88', '\x3', '\x2', '\x2', '\x2', 
		'\x89', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x90', '\x3', '\x2', 
		'\x2', '\x2', '\x8B', '\x8C', '\x5', ',', '\x17', '\x2', '\x8C', '\x8D', 
		'\x5', '\x16', '\f', '\x2', '\x8D', '\x8E', '\a', ' ', '\x2', '\x2', '\x8E', 
		'\x90', '\x3', '\x2', '\x2', '\x2', '\x8F', 'p', '\x3', '\x2', '\x2', 
		'\x2', '\x8F', 'w', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', '\a', '!', '\x2', 
		'\x2', '\x92', '\x15', '\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\a', 
		'\x1D', '\x2', '\x2', '\x94', '\x17', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x98', '\x5', '\x1A', '\xE', '\x2', '\x96', '\x98', '\x5', '\x1C', '\xF', 
		'\x2', '\x97', '\x95', '\x3', '\x2', '\x2', '\x2', '\x97', '\x96', '\x3', 
		'\x2', '\x2', '\x2', '\x98', '\x19', '\x3', '\x2', '\x2', '\x2', '\x99', 
		'\x9E', '\x5', '$', '\x13', '\x2', '\x9A', '\x9E', '\x5', '*', '\x16', 
		'\x2', '\x9B', '\x9E', '\x5', '.', '\x18', '\x2', '\x9C', '\x9E', '\x5', 
		',', '\x17', '\x2', '\x9D', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9D', 
		'\x9A', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9B', '\x3', '\x2', '\x2', 
		'\x2', '\x9D', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x9F', '\xA4', '\a', '\x1D', '\x2', '\x2', '\xA0', 
		'\xA1', '\a', '\x1D', '\x2', '\x2', '\xA1', '\xA2', '\a', '\x4', '\x2', 
		'\x2', '\xA2', '\xA4', '\a', '\x1D', '\x2', '\x2', '\xA3', '\x9F', '\x3', 
		'\x2', '\x2', '\x2', '\xA3', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA8', '\x5', ' ', '\x11', 
		'\x2', '\xA6', '\xA8', '\x5', '\"', '\x12', '\x2', '\xA7', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\xA7', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA8', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\x5', '\x18', '\r', 
		'\x2', '\xAA', '\xAB', '\a', '\x5', '\x2', '\x2', '\xAB', '\xAC', '\a', 
		'\x6', '\x2', '\x2', '\xAC', '!', '\x3', '\x2', '\x2', '\x2', '\xAD', 
		'\xAE', '\x5', '\x18', '\r', '\x2', '\xAE', '\xAF', '\a', '\x5', '\x2', 
		'\x2', '\xAF', '\xB0', '\a', '\x1E', '\x2', '\x2', '\xB0', '\xB1', '\a', 
		'\x6', '\x2', '\x2', '\xB1', '#', '\x3', '\x2', '\x2', '\x2', '\xB2', 
		'\xB5', '\x5', '&', '\x14', '\x2', '\xB3', '\xB5', '\x5', '(', '\x15', 
		'\x2', '\xB4', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\xB5', '%', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xB7', '\t', '\x2', '\x2', '\x2', '\xB7', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\xB8', '\xB9', '\t', '\x3', '\x2', '\x2', '\xB9', ')', '\x3', 
		'\x2', '\x2', '\x2', '\xBA', '\xBB', '\t', '\x4', '\x2', '\x2', '\xBB', 
		'+', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', '\a', '\x12', '\x2', 
		'\x2', '\xBD', '-', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', '\a', 
		'\a', '\x2', '\x2', '\xBF', '/', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC1', 
		'\t', '\x5', '\x2', '\x2', '\xC1', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\xC2', '\xC4', '\x5', '\x30', '\x19', '\x2', '\xC3', '\xC2', '\x3', '\x2', 
		'\x2', '\x2', '\xC3', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', 
		'\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\a', '\x1E', '\x2', '\x2', 
		'\xC6', '\x33', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC9', '\x5', '\x30', 
		'\x19', '\x2', '\xC8', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', 
		'\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\x3', '\x2', '\x2', '\x2', 
		'\xCA', '\xCB', '\a', '\x1F', '\x2', '\x2', '\xCB', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\xCC', '\xCD', '\t', '\x6', '\x2', '\x2', '\xCD', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\x41', 'G', 'I', 'Y', '\x66', 'j', 
		'n', 'u', '|', '\x7F', '\x86', '\x89', '\x8F', '\x97', '\x9D', '\xA3', 
		'\xA7', '\xB4', '\xC3', '\xC8',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Joanneum.Robotics.Ros.MessageParser
