//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/BRG/Projekte/RosMessageParser/Joanneum.Robotics.Ros.MessageParser\RosMessageParser.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Joanneum.Robotics.Ros.MessageParser.Antlr {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class RosMessageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BOOL=1, INT8=2, UINT8=3, BYTE=4, CHAR=5, INT16=6, UINT16=7, INT32=8, UINT32=9, 
		INT64=10, UINT64=11, FLOAT32=12, FLOAT64=13, STRING=14, TIME=15, DURATION=16, 
		SLASH=17, OPEN_BRACKET=18, CLOSE_BRACKET=19, ASSIGNMENT=20, PLUS=21, MINUS=22, 
		HASH=23, MESSAGE_SEPARATOR=24, INTEGER_LITERAL=25, REAL_LITERAL=26, TRUE=27, 
		FALSE=28, IDENTIFIER=29, ROSBAG_MESSAGE_SEPARATOR=30, WHITESPACES=31, 
		NEWLINES=32, NEWLINE=33, STRING_IDENTIFIER=34, STRING_OPEN_BRACKET=35, 
		STRING_CLOSE_BRACKET=36, STRING_INTEGER_LITERAL=37, STRING_ASSIGNMENT=38, 
		STRING_HASH=39, STRING_WHITESPACES=40, STRING_NEWLINE=41, STRING_VALUE=42, 
		STRIN_ASSIGNMENT_NEWLINE=43, COMMENT=44, COMMENT_NEWLINE=45;
	public const int
		RULE_ros_file_input = 0, RULE_ros_message_input = 1, RULE_ros_action_input = 2, 
		RULE_ros_service_input = 3, RULE_rosbag_input = 4, RULE_rosbag_nested_message = 5, 
		RULE_ros_message = 6, RULE_field_declaration = 7, RULE_constant_declaration = 8, 
		RULE_comment = 9, RULE_identifier = 10, RULE_type = 11, RULE_ros_type = 12, 
		RULE_array_type = 13, RULE_variable_array_type = 14, RULE_fixed_array_type = 15, 
		RULE_integral_type = 16, RULE_floating_point_type = 17, RULE_temportal_type = 18, 
		RULE_string_type = 19, RULE_boolean_type = 20, RULE_sign = 21, RULE_integral_value = 22, 
		RULE_floating_point_value = 23, RULE_bool_value = 24, RULE_string_value = 25;
	public static readonly string[] ruleNames = {
		"ros_file_input", "ros_message_input", "ros_action_input", "ros_service_input", 
		"rosbag_input", "rosbag_nested_message", "ros_message", "field_declaration", 
		"constant_declaration", "comment", "identifier", "type", "ros_type", "array_type", 
		"variable_array_type", "fixed_array_type", "integral_type", "floating_point_type", 
		"temportal_type", "string_type", "boolean_type", "sign", "integral_value", 
		"floating_point_value", "bool_value", "string_value"
	};

	private static readonly string[] _LiteralNames = {
		null, "'bool'", "'int8'", "'uint8'", "'byte'", "'char'", "'int16'", "'uint16'", 
		"'int32'", "'uint32'", "'int64'", "'uint64'", "'float32'", "'float64'", 
		"'string'", "'time'", "'duration'", "'/'", null, null, null, "'+'", "'-'", 
		null, "'---'", null, null, "'True'", "'False'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BOOL", "INT8", "UINT8", "BYTE", "CHAR", "INT16", "UINT16", "INT32", 
		"UINT32", "INT64", "UINT64", "FLOAT32", "FLOAT64", "STRING", "TIME", "DURATION", 
		"SLASH", "OPEN_BRACKET", "CLOSE_BRACKET", "ASSIGNMENT", "PLUS", "MINUS", 
		"HASH", "MESSAGE_SEPARATOR", "INTEGER_LITERAL", "REAL_LITERAL", "TRUE", 
		"FALSE", "IDENTIFIER", "ROSBAG_MESSAGE_SEPARATOR", "WHITESPACES", "NEWLINES", 
		"NEWLINE", "STRING_IDENTIFIER", "STRING_OPEN_BRACKET", "STRING_CLOSE_BRACKET", 
		"STRING_INTEGER_LITERAL", "STRING_ASSIGNMENT", "STRING_HASH", "STRING_WHITESPACES", 
		"STRING_NEWLINE", "STRING_VALUE", "STRIN_ASSIGNMENT_NEWLINE", "COMMENT", 
		"COMMENT_NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RosMessageParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static RosMessageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RosMessageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RosMessageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Ros_file_inputContext : ParserRuleContext {
		public Ros_message_inputContext ros_message_input() {
			return GetRuleContext<Ros_message_inputContext>(0);
		}
		public Ros_action_inputContext ros_action_input() {
			return GetRuleContext<Ros_action_inputContext>(0);
		}
		public Ros_service_inputContext ros_service_input() {
			return GetRuleContext<Ros_service_inputContext>(0);
		}
		public Ros_file_inputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ros_file_input; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.EnterRos_file_input(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.ExitRos_file_input(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageParserVisitor<TResult> typedVisitor = visitor as IRosMessageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRos_file_input(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ros_file_inputContext ros_file_input() {
		Ros_file_inputContext _localctx = new Ros_file_inputContext(Context, State);
		EnterRule(_localctx, 0, RULE_ros_file_input);
		try {
			State = 55;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 52; ros_message_input();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 53; ros_action_input();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 54; ros_service_input();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ros_message_inputContext : ParserRuleContext {
		public Ros_messageContext ros_message() {
			return GetRuleContext<Ros_messageContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(RosMessageParser.Eof, 0); }
		public Ros_message_inputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ros_message_input; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.EnterRos_message_input(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.ExitRos_message_input(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageParserVisitor<TResult> typedVisitor = visitor as IRosMessageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRos_message_input(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ros_message_inputContext ros_message_input() {
		Ros_message_inputContext _localctx = new Ros_message_inputContext(Context, State);
		EnterRule(_localctx, 2, RULE_ros_message_input);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57; ros_message();
			State = 58; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ros_action_inputContext : ParserRuleContext {
		public Ros_messageContext[] ros_message() {
			return GetRuleContexts<Ros_messageContext>();
		}
		public Ros_messageContext ros_message(int i) {
			return GetRuleContext<Ros_messageContext>(i);
		}
		public ITerminalNode[] MESSAGE_SEPARATOR() { return GetTokens(RosMessageParser.MESSAGE_SEPARATOR); }
		public ITerminalNode MESSAGE_SEPARATOR(int i) {
			return GetToken(RosMessageParser.MESSAGE_SEPARATOR, i);
		}
		public ITerminalNode Eof() { return GetToken(RosMessageParser.Eof, 0); }
		public Ros_action_inputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ros_action_input; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.EnterRos_action_input(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.ExitRos_action_input(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageParserVisitor<TResult> typedVisitor = visitor as IRosMessageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRos_action_input(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ros_action_inputContext ros_action_input() {
		Ros_action_inputContext _localctx = new Ros_action_inputContext(Context, State);
		EnterRule(_localctx, 4, RULE_ros_action_input);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; ros_message();
			State = 61; Match(MESSAGE_SEPARATOR);
			State = 62; ros_message();
			State = 63; Match(MESSAGE_SEPARATOR);
			State = 64; ros_message();
			State = 65; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ros_service_inputContext : ParserRuleContext {
		public Ros_messageContext[] ros_message() {
			return GetRuleContexts<Ros_messageContext>();
		}
		public Ros_messageContext ros_message(int i) {
			return GetRuleContext<Ros_messageContext>(i);
		}
		public ITerminalNode MESSAGE_SEPARATOR() { return GetToken(RosMessageParser.MESSAGE_SEPARATOR, 0); }
		public ITerminalNode Eof() { return GetToken(RosMessageParser.Eof, 0); }
		public Ros_service_inputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ros_service_input; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.EnterRos_service_input(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.ExitRos_service_input(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageParserVisitor<TResult> typedVisitor = visitor as IRosMessageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRos_service_input(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ros_service_inputContext ros_service_input() {
		Ros_service_inputContext _localctx = new Ros_service_inputContext(Context, State);
		EnterRule(_localctx, 6, RULE_ros_service_input);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67; ros_message();
			State = 68; Match(MESSAGE_SEPARATOR);
			State = 69; ros_message();
			State = 70; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rosbag_inputContext : ParserRuleContext {
		public Ros_messageContext ros_message() {
			return GetRuleContext<Ros_messageContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(RosMessageParser.Eof, 0); }
		public Rosbag_nested_messageContext[] rosbag_nested_message() {
			return GetRuleContexts<Rosbag_nested_messageContext>();
		}
		public Rosbag_nested_messageContext rosbag_nested_message(int i) {
			return GetRuleContext<Rosbag_nested_messageContext>(i);
		}
		public Rosbag_inputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rosbag_input; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.EnterRosbag_input(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.ExitRosbag_input(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageParserVisitor<TResult> typedVisitor = visitor as IRosMessageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRosbag_input(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rosbag_inputContext rosbag_input() {
		Rosbag_inputContext _localctx = new Rosbag_inputContext(Context, State);
		EnterRule(_localctx, 8, RULE_rosbag_input);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; ros_message();
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ROSBAG_MESSAGE_SEPARATOR) {
				{
				{
				State = 73; rosbag_nested_message();
				}
				}
				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 79; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rosbag_nested_messageContext : ParserRuleContext {
		public ITerminalNode ROSBAG_MESSAGE_SEPARATOR() { return GetToken(RosMessageParser.ROSBAG_MESSAGE_SEPARATOR, 0); }
		public Ros_typeContext ros_type() {
			return GetRuleContext<Ros_typeContext>(0);
		}
		public Ros_messageContext ros_message() {
			return GetRuleContext<Ros_messageContext>(0);
		}
		public Rosbag_nested_messageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rosbag_nested_message; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.EnterRosbag_nested_message(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.ExitRosbag_nested_message(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageParserVisitor<TResult> typedVisitor = visitor as IRosMessageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRosbag_nested_message(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rosbag_nested_messageContext rosbag_nested_message() {
		Rosbag_nested_messageContext _localctx = new Rosbag_nested_messageContext(Context, State);
		EnterRule(_localctx, 10, RULE_rosbag_nested_message);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; Match(ROSBAG_MESSAGE_SEPARATOR);
			State = 82; ros_type();
			State = 83; ros_message();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ros_messageContext : ParserRuleContext {
		public Field_declarationContext[] field_declaration() {
			return GetRuleContexts<Field_declarationContext>();
		}
		public Field_declarationContext field_declaration(int i) {
			return GetRuleContext<Field_declarationContext>(i);
		}
		public Constant_declarationContext[] constant_declaration() {
			return GetRuleContexts<Constant_declarationContext>();
		}
		public Constant_declarationContext constant_declaration(int i) {
			return GetRuleContext<Constant_declarationContext>(i);
		}
		public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public Ros_messageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ros_message; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.EnterRos_message(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.ExitRos_message(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageParserVisitor<TResult> typedVisitor = visitor as IRosMessageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRos_message(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ros_messageContext ros_message() {
		Ros_messageContext _localctx = new Ros_messageContext(Context, State);
		EnterRule(_localctx, 12, RULE_ros_message);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOL) | (1L << INT8) | (1L << UINT8) | (1L << BYTE) | (1L << CHAR) | (1L << INT16) | (1L << UINT16) | (1L << INT32) | (1L << UINT32) | (1L << INT64) | (1L << UINT64) | (1L << FLOAT32) | (1L << FLOAT64) | (1L << STRING) | (1L << TIME) | (1L << DURATION) | (1L << HASH) | (1L << IDENTIFIER) | (1L << STRING_HASH))) != 0)) {
				{
				State = 88;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 85; field_declaration();
					}
					break;
				case 2:
					{
					State = 86; constant_declaration();
					}
					break;
				case 3:
					{
					State = 87; comment();
					}
					break;
				}
				}
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_declarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Array_typeContext array_type() {
			return GetRuleContext<Array_typeContext>(0);
		}
		public Field_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.EnterField_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.ExitField_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageParserVisitor<TResult> typedVisitor = visitor as IRosMessageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_declarationContext field_declaration() {
		Field_declarationContext _localctx = new Field_declarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_field_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 93; type();
				}
				break;
			case 2:
				{
				State = 94; array_type();
				}
				break;
			}
			State = 97; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_declarationContext : ParserRuleContext {
		public Integral_typeContext integral_type() {
			return GetRuleContext<Integral_typeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(RosMessageParser.ASSIGNMENT, 0); }
		public Integral_valueContext integral_value() {
			return GetRuleContext<Integral_valueContext>(0);
		}
		public Floating_point_typeContext floating_point_type() {
			return GetRuleContext<Floating_point_typeContext>(0);
		}
		public Floating_point_valueContext floating_point_value() {
			return GetRuleContext<Floating_point_valueContext>(0);
		}
		public Boolean_typeContext boolean_type() {
			return GetRuleContext<Boolean_typeContext>(0);
		}
		public Bool_valueContext bool_value() {
			return GetRuleContext<Bool_valueContext>(0);
		}
		public String_typeContext string_type() {
			return GetRuleContext<String_typeContext>(0);
		}
		public ITerminalNode STRING_ASSIGNMENT() { return GetToken(RosMessageParser.STRING_ASSIGNMENT, 0); }
		public String_valueContext string_value() {
			return GetRuleContext<String_valueContext>(0);
		}
		public Constant_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.EnterConstant_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.ExitConstant_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageParserVisitor<TResult> typedVisitor = visitor as IRosMessageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_declarationContext constant_declaration() {
		Constant_declarationContext _localctx = new Constant_declarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_constant_declaration);
		try {
			State = 123;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT8:
			case UINT8:
			case BYTE:
			case CHAR:
			case INT16:
			case UINT16:
			case INT32:
			case UINT32:
			case INT64:
			case UINT64:
				EnterOuterAlt(_localctx, 1);
				{
				State = 99; integral_type();
				State = 100; identifier();
				State = 101; Match(ASSIGNMENT);
				State = 102; integral_value();
				}
				break;
			case FLOAT32:
			case FLOAT64:
				EnterOuterAlt(_localctx, 2);
				{
				State = 104; floating_point_type();
				State = 105; identifier();
				State = 106; Match(ASSIGNMENT);
				State = 109;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 107; integral_value();
					}
					break;
				case 2:
					{
					State = 108; floating_point_value();
					}
					break;
				}
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 111; boolean_type();
				State = 112; identifier();
				State = 113; Match(ASSIGNMENT);
				State = 116;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TRUE:
				case FALSE:
					{
					State = 114; bool_value();
					}
					break;
				case PLUS:
				case MINUS:
				case INTEGER_LITERAL:
					{
					State = 115; integral_value();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 118; string_type();
				State = 119; identifier();
				State = 120; Match(STRING_ASSIGNMENT);
				State = 121; string_value();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		public ITerminalNode COMMENT() { return GetToken(RosMessageParser.COMMENT, 0); }
		public ITerminalNode HASH() { return GetToken(RosMessageParser.HASH, 0); }
		public ITerminalNode STRING_HASH() { return GetToken(RosMessageParser.STRING_HASH, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageParserVisitor<TResult> typedVisitor = visitor as IRosMessageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 18, RULE_comment);
		int _la;
		try {
			State = 128;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 125;
				_la = TokenStream.LA(1);
				if ( !(_la==HASH || _la==STRING_HASH) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 126; Match(COMMENT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 127;
				_la = TokenStream.LA(1);
				if ( !(_la==HASH || _la==STRING_HASH) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(RosMessageParser.IDENTIFIER, 0); }
		public ITerminalNode STRING_IDENTIFIER() { return GetToken(RosMessageParser.STRING_IDENTIFIER, 0); }
		public ITerminalNode INT8() { return GetToken(RosMessageParser.INT8, 0); }
		public ITerminalNode UINT8() { return GetToken(RosMessageParser.UINT8, 0); }
		public ITerminalNode INT16() { return GetToken(RosMessageParser.INT16, 0); }
		public ITerminalNode UINT16() { return GetToken(RosMessageParser.UINT16, 0); }
		public ITerminalNode INT32() { return GetToken(RosMessageParser.INT32, 0); }
		public ITerminalNode UINT32() { return GetToken(RosMessageParser.UINT32, 0); }
		public ITerminalNode INT64() { return GetToken(RosMessageParser.INT64, 0); }
		public ITerminalNode UINT64() { return GetToken(RosMessageParser.UINT64, 0); }
		public ITerminalNode BYTE() { return GetToken(RosMessageParser.BYTE, 0); }
		public ITerminalNode CHAR() { return GetToken(RosMessageParser.CHAR, 0); }
		public ITerminalNode FLOAT32() { return GetToken(RosMessageParser.FLOAT32, 0); }
		public ITerminalNode FLOAT64() { return GetToken(RosMessageParser.FLOAT64, 0); }
		public ITerminalNode TIME() { return GetToken(RosMessageParser.TIME, 0); }
		public ITerminalNode DURATION() { return GetToken(RosMessageParser.DURATION, 0); }
		public ITerminalNode STRING() { return GetToken(RosMessageParser.STRING, 0); }
		public ITerminalNode BOOL() { return GetToken(RosMessageParser.BOOL, 0); }
		public ITerminalNode TRUE() { return GetToken(RosMessageParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(RosMessageParser.FALSE, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageParserVisitor<TResult> typedVisitor = visitor as IRosMessageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 20, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOL) | (1L << INT8) | (1L << UINT8) | (1L << BYTE) | (1L << CHAR) | (1L << INT16) | (1L << UINT16) | (1L << INT32) | (1L << UINT32) | (1L << INT64) | (1L << UINT64) | (1L << FLOAT32) | (1L << FLOAT64) | (1L << STRING) | (1L << TIME) | (1L << DURATION) | (1L << TRUE) | (1L << FALSE) | (1L << IDENTIFIER) | (1L << STRING_IDENTIFIER))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public Integral_typeContext integral_type() {
			return GetRuleContext<Integral_typeContext>(0);
		}
		public Floating_point_typeContext floating_point_type() {
			return GetRuleContext<Floating_point_typeContext>(0);
		}
		public Temportal_typeContext temportal_type() {
			return GetRuleContext<Temportal_typeContext>(0);
		}
		public Boolean_typeContext boolean_type() {
			return GetRuleContext<Boolean_typeContext>(0);
		}
		public String_typeContext string_type() {
			return GetRuleContext<String_typeContext>(0);
		}
		public Ros_typeContext ros_type() {
			return GetRuleContext<Ros_typeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageParserVisitor<TResult> typedVisitor = visitor as IRosMessageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 22, RULE_type);
		try {
			State = 138;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT8:
			case UINT8:
			case BYTE:
			case CHAR:
			case INT16:
			case UINT16:
			case INT32:
			case UINT32:
			case INT64:
			case UINT64:
				EnterOuterAlt(_localctx, 1);
				{
				State = 132; integral_type();
				}
				break;
			case FLOAT32:
			case FLOAT64:
				EnterOuterAlt(_localctx, 2);
				{
				State = 133; floating_point_type();
				}
				break;
			case TIME:
			case DURATION:
				EnterOuterAlt(_localctx, 3);
				{
				State = 134; temportal_type();
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 135; boolean_type();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 5);
				{
				State = 136; string_type();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 137; ros_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ros_typeContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(RosMessageParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(RosMessageParser.IDENTIFIER, i);
		}
		public ITerminalNode SLASH() { return GetToken(RosMessageParser.SLASH, 0); }
		public Ros_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ros_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.EnterRos_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.ExitRos_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageParserVisitor<TResult> typedVisitor = visitor as IRosMessageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRos_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ros_typeContext ros_type() {
		Ros_typeContext _localctx = new Ros_typeContext(Context, State);
		EnterRule(_localctx, 24, RULE_ros_type);
		try {
			State = 144;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 140; Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 141; Match(IDENTIFIER);
				State = 142; Match(SLASH);
				State = 143; Match(IDENTIFIER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_typeContext : ParserRuleContext {
		public Variable_array_typeContext variable_array_type() {
			return GetRuleContext<Variable_array_typeContext>(0);
		}
		public Fixed_array_typeContext fixed_array_type() {
			return GetRuleContext<Fixed_array_typeContext>(0);
		}
		public Array_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.EnterArray_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.ExitArray_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageParserVisitor<TResult> typedVisitor = visitor as IRosMessageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_typeContext array_type() {
		Array_typeContext _localctx = new Array_typeContext(Context, State);
		EnterRule(_localctx, 26, RULE_array_type);
		try {
			State = 148;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 146; variable_array_type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 147; fixed_array_type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_array_typeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode OPEN_BRACKET() { return GetToken(RosMessageParser.OPEN_BRACKET, 0); }
		public ITerminalNode STRING_OPEN_BRACKET() { return GetToken(RosMessageParser.STRING_OPEN_BRACKET, 0); }
		public ITerminalNode CLOSE_BRACKET() { return GetToken(RosMessageParser.CLOSE_BRACKET, 0); }
		public ITerminalNode STRING_CLOSE_BRACKET() { return GetToken(RosMessageParser.STRING_CLOSE_BRACKET, 0); }
		public Variable_array_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_array_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.EnterVariable_array_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.ExitVariable_array_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageParserVisitor<TResult> typedVisitor = visitor as IRosMessageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_array_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_array_typeContext variable_array_type() {
		Variable_array_typeContext _localctx = new Variable_array_typeContext(Context, State);
		EnterRule(_localctx, 28, RULE_variable_array_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150; type();
			State = 151;
			_la = TokenStream.LA(1);
			if ( !(_la==OPEN_BRACKET || _la==STRING_OPEN_BRACKET) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 152;
			_la = TokenStream.LA(1);
			if ( !(_la==CLOSE_BRACKET || _la==STRING_CLOSE_BRACKET) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_array_typeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode OPEN_BRACKET() { return GetToken(RosMessageParser.OPEN_BRACKET, 0); }
		public ITerminalNode INTEGER_LITERAL() { return GetToken(RosMessageParser.INTEGER_LITERAL, 0); }
		public ITerminalNode CLOSE_BRACKET() { return GetToken(RosMessageParser.CLOSE_BRACKET, 0); }
		public ITerminalNode STRING_OPEN_BRACKET() { return GetToken(RosMessageParser.STRING_OPEN_BRACKET, 0); }
		public ITerminalNode STRING_INTEGER_LITERAL() { return GetToken(RosMessageParser.STRING_INTEGER_LITERAL, 0); }
		public ITerminalNode STRING_CLOSE_BRACKET() { return GetToken(RosMessageParser.STRING_CLOSE_BRACKET, 0); }
		public Fixed_array_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_array_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.EnterFixed_array_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.ExitFixed_array_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageParserVisitor<TResult> typedVisitor = visitor as IRosMessageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_array_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_array_typeContext fixed_array_type() {
		Fixed_array_typeContext _localctx = new Fixed_array_typeContext(Context, State);
		EnterRule(_localctx, 30, RULE_fixed_array_type);
		try {
			State = 164;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 154; type();
				State = 155; Match(OPEN_BRACKET);
				State = 156; Match(INTEGER_LITERAL);
				State = 157; Match(CLOSE_BRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 159; type();
				State = 160; Match(STRING_OPEN_BRACKET);
				State = 161; Match(STRING_INTEGER_LITERAL);
				State = 162; Match(STRING_CLOSE_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Integral_typeContext : ParserRuleContext {
		public ITerminalNode INT8() { return GetToken(RosMessageParser.INT8, 0); }
		public ITerminalNode UINT8() { return GetToken(RosMessageParser.UINT8, 0); }
		public ITerminalNode INT16() { return GetToken(RosMessageParser.INT16, 0); }
		public ITerminalNode UINT16() { return GetToken(RosMessageParser.UINT16, 0); }
		public ITerminalNode INT32() { return GetToken(RosMessageParser.INT32, 0); }
		public ITerminalNode UINT32() { return GetToken(RosMessageParser.UINT32, 0); }
		public ITerminalNode INT64() { return GetToken(RosMessageParser.INT64, 0); }
		public ITerminalNode UINT64() { return GetToken(RosMessageParser.UINT64, 0); }
		public ITerminalNode BYTE() { return GetToken(RosMessageParser.BYTE, 0); }
		public ITerminalNode CHAR() { return GetToken(RosMessageParser.CHAR, 0); }
		public Integral_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integral_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.EnterIntegral_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.ExitIntegral_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageParserVisitor<TResult> typedVisitor = visitor as IRosMessageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegral_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Integral_typeContext integral_type() {
		Integral_typeContext _localctx = new Integral_typeContext(Context, State);
		EnterRule(_localctx, 32, RULE_integral_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT8) | (1L << UINT8) | (1L << BYTE) | (1L << CHAR) | (1L << INT16) | (1L << UINT16) | (1L << INT32) | (1L << UINT32) | (1L << INT64) | (1L << UINT64))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Floating_point_typeContext : ParserRuleContext {
		public ITerminalNode FLOAT32() { return GetToken(RosMessageParser.FLOAT32, 0); }
		public ITerminalNode FLOAT64() { return GetToken(RosMessageParser.FLOAT64, 0); }
		public Floating_point_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floating_point_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.EnterFloating_point_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.ExitFloating_point_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageParserVisitor<TResult> typedVisitor = visitor as IRosMessageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloating_point_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Floating_point_typeContext floating_point_type() {
		Floating_point_typeContext _localctx = new Floating_point_typeContext(Context, State);
		EnterRule(_localctx, 34, RULE_floating_point_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			_la = TokenStream.LA(1);
			if ( !(_la==FLOAT32 || _la==FLOAT64) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Temportal_typeContext : ParserRuleContext {
		public ITerminalNode TIME() { return GetToken(RosMessageParser.TIME, 0); }
		public ITerminalNode DURATION() { return GetToken(RosMessageParser.DURATION, 0); }
		public Temportal_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_temportal_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.EnterTemportal_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.ExitTemportal_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageParserVisitor<TResult> typedVisitor = visitor as IRosMessageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemportal_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Temportal_typeContext temportal_type() {
		Temportal_typeContext _localctx = new Temportal_typeContext(Context, State);
		EnterRule(_localctx, 36, RULE_temportal_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			_la = TokenStream.LA(1);
			if ( !(_la==TIME || _la==DURATION) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_typeContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(RosMessageParser.STRING, 0); }
		public String_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.EnterString_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.ExitString_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageParserVisitor<TResult> typedVisitor = visitor as IRosMessageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_typeContext string_type() {
		String_typeContext _localctx = new String_typeContext(Context, State);
		EnterRule(_localctx, 38, RULE_string_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_typeContext : ParserRuleContext {
		public ITerminalNode BOOL() { return GetToken(RosMessageParser.BOOL, 0); }
		public Boolean_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.EnterBoolean_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.ExitBoolean_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageParserVisitor<TResult> typedVisitor = visitor as IRosMessageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_typeContext boolean_type() {
		Boolean_typeContext _localctx = new Boolean_typeContext(Context, State);
		EnterRule(_localctx, 40, RULE_boolean_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174; Match(BOOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(RosMessageParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(RosMessageParser.MINUS, 0); }
		public SignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.EnterSign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.ExitSign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageParserVisitor<TResult> typedVisitor = visitor as IRosMessageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignContext sign() {
		SignContext _localctx = new SignContext(Context, State);
		EnterRule(_localctx, 42, RULE_sign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Integral_valueContext : ParserRuleContext {
		public ITerminalNode INTEGER_LITERAL() { return GetToken(RosMessageParser.INTEGER_LITERAL, 0); }
		public SignContext sign() {
			return GetRuleContext<SignContext>(0);
		}
		public Integral_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integral_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.EnterIntegral_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.ExitIntegral_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageParserVisitor<TResult> typedVisitor = visitor as IRosMessageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegral_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Integral_valueContext integral_value() {
		Integral_valueContext _localctx = new Integral_valueContext(Context, State);
		EnterRule(_localctx, 44, RULE_integral_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 178; sign();
				}
			}

			State = 181; Match(INTEGER_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Floating_point_valueContext : ParserRuleContext {
		public ITerminalNode REAL_LITERAL() { return GetToken(RosMessageParser.REAL_LITERAL, 0); }
		public SignContext sign() {
			return GetRuleContext<SignContext>(0);
		}
		public Floating_point_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floating_point_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.EnterFloating_point_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.ExitFloating_point_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageParserVisitor<TResult> typedVisitor = visitor as IRosMessageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloating_point_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Floating_point_valueContext floating_point_value() {
		Floating_point_valueContext _localctx = new Floating_point_valueContext(Context, State);
		EnterRule(_localctx, 46, RULE_floating_point_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 183; sign();
				}
			}

			State = 186; Match(REAL_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_valueContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(RosMessageParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(RosMessageParser.FALSE, 0); }
		public Bool_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.EnterBool_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.ExitBool_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageParserVisitor<TResult> typedVisitor = visitor as IRosMessageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bool_valueContext bool_value() {
		Bool_valueContext _localctx = new Bool_valueContext(Context, State);
		EnterRule(_localctx, 48, RULE_bool_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_valueContext : ParserRuleContext {
		public ITerminalNode STRING_VALUE() { return GetToken(RosMessageParser.STRING_VALUE, 0); }
		public String_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.EnterString_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRosMessageParserListener typedListener = listener as IRosMessageParserListener;
			if (typedListener != null) typedListener.ExitString_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRosMessageParserVisitor<TResult> typedVisitor = visitor as IRosMessageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_valueContext string_value() {
		String_valueContext _localctx = new String_valueContext(Context, State);
		EnterRule(_localctx, 50, RULE_string_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190; Match(STRING_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '/', '\xC3', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', 
		'\x2', ':', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'M', '\n', 
		'\x6', '\f', '\x6', '\xE', '\x6', 'P', '\v', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\a', '\b', '[', '\n', '\b', '\f', '\b', '\xE', 
		'\b', '^', '\v', '\b', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x62', 
		'\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x5', '\n', 'p', '\n', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', 'w', '\n', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', 
		'\n', '~', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 
		'\x83', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x8D', 
		'\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\x93', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', 
		'\x97', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\xA7', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x18', '\x5', '\x18', '\xB6', '\n', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x19', '\x5', '\x19', '\xBB', '\n', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x2', '\x2', '\x1C', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x2', 
		'\v', '\x4', '\x2', '\x19', '\x19', ')', ')', '\x5', '\x2', '\x3', '\x12', 
		'\x1D', '\x1F', '$', '$', '\x4', '\x2', '\x14', '\x14', '%', '%', '\x4', 
		'\x2', '\x15', '\x15', '&', '&', '\x3', '\x2', '\x4', '\r', '\x3', '\x2', 
		'\xE', '\xF', '\x3', '\x2', '\x11', '\x12', '\x3', '\x2', '\x17', '\x18', 
		'\x3', '\x2', '\x1D', '\x1E', '\x2', '\xBF', '\x2', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '\x4', ';', '\x3', '\x2', '\x2', '\x2', '\x6', '>', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\x45', '\x3', '\x2', '\x2', '\x2', '\n', 'J', 
		'\x3', '\x2', '\x2', '\x2', '\f', 'S', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\\', '\x3', '\x2', '\x2', '\x2', '\x10', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '}', '\x3', '\x2', '\x2', '\x2', '\x14', '\x82', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x84', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\x8C', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x92', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\x96', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x98', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\xA6', '\x3', '\x2', '\x2', '\x2', '\"', '\xA8', 
		'\x3', '\x2', '\x2', '\x2', '$', '\xAA', '\x3', '\x2', '\x2', '\x2', '&', 
		'\xAC', '\x3', '\x2', '\x2', '\x2', '(', '\xAE', '\x3', '\x2', '\x2', 
		'\x2', '*', '\xB0', '\x3', '\x2', '\x2', '\x2', ',', '\xB2', '\x3', '\x2', 
		'\x2', '\x2', '.', '\xB5', '\x3', '\x2', '\x2', '\x2', '\x30', '\xBA', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\xBE', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\xC0', '\x3', '\x2', '\x2', '\x2', '\x36', ':', '\x5', '\x4', 
		'\x3', '\x2', '\x37', ':', '\x5', '\x6', '\x4', '\x2', '\x38', ':', '\x5', 
		'\b', '\x5', '\x2', '\x39', '\x36', '\x3', '\x2', '\x2', '\x2', '\x39', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x39', '\x38', '\x3', '\x2', '\x2', 
		'\x2', ':', '\x3', '\x3', '\x2', '\x2', '\x2', ';', '<', '\x5', '\xE', 
		'\b', '\x2', '<', '=', '\a', '\x2', '\x2', '\x3', '=', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '>', '?', '\x5', '\xE', '\b', '\x2', '?', '@', '\a', '\x1A', 
		'\x2', '\x2', '@', '\x41', '\x5', '\xE', '\b', '\x2', '\x41', '\x42', 
		'\a', '\x1A', '\x2', '\x2', '\x42', '\x43', '\x5', '\xE', '\b', '\x2', 
		'\x43', '\x44', '\a', '\x2', '\x2', '\x3', '\x44', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\x45', '\x46', '\x5', '\xE', '\b', '\x2', '\x46', 'G', 
		'\a', '\x1A', '\x2', '\x2', 'G', 'H', '\x5', '\xE', '\b', '\x2', 'H', 
		'I', '\a', '\x2', '\x2', '\x3', 'I', '\t', '\x3', '\x2', '\x2', '\x2', 
		'J', 'N', '\x5', '\xE', '\b', '\x2', 'K', 'M', '\x5', '\f', '\a', '\x2', 
		'L', 'K', '\x3', '\x2', '\x2', '\x2', 'M', 'P', '\x3', '\x2', '\x2', '\x2', 
		'N', 'L', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x3', '\x2', '\x2', '\x2', 
		'O', 'Q', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'R', '\a', '\x2', '\x2', '\x3', 'R', '\v', '\x3', '\x2', '\x2', '\x2', 
		'S', 'T', '\a', ' ', '\x2', '\x2', 'T', 'U', '\x5', '\x1A', '\xE', '\x2', 
		'U', 'V', '\x5', '\xE', '\b', '\x2', 'V', '\r', '\x3', '\x2', '\x2', '\x2', 
		'W', '[', '\x5', '\x10', '\t', '\x2', 'X', '[', '\x5', '\x12', '\n', '\x2', 
		'Y', '[', '\x5', '\x14', '\v', '\x2', 'Z', 'W', '\x3', '\x2', '\x2', '\x2', 
		'Z', 'X', '\x3', '\x2', '\x2', '\x2', 'Z', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'[', '^', '\x3', '\x2', '\x2', '\x2', '\\', 'Z', '\x3', '\x2', '\x2', 
		'\x2', '\\', ']', '\x3', '\x2', '\x2', '\x2', ']', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '^', '\\', '\x3', '\x2', '\x2', '\x2', '_', '\x62', '\x5', 
		'\x18', '\r', '\x2', '`', '\x62', '\x5', '\x1C', '\xF', '\x2', '\x61', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x61', '`', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x63', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x5', '\x16', 
		'\f', '\x2', '\x64', '\x11', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', 
		'\x5', '\"', '\x12', '\x2', '\x66', 'g', '\x5', '\x16', '\f', '\x2', 'g', 
		'h', '\a', '\x16', '\x2', '\x2', 'h', 'i', '\x5', '.', '\x18', '\x2', 
		'i', '~', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x5', '$', '\x13', '\x2', 
		'k', 'l', '\x5', '\x16', '\f', '\x2', 'l', 'o', '\a', '\x16', '\x2', '\x2', 
		'm', 'p', '\x5', '.', '\x18', '\x2', 'n', 'p', '\x5', '\x30', '\x19', 
		'\x2', 'o', 'm', '\x3', '\x2', '\x2', '\x2', 'o', 'n', '\x3', '\x2', '\x2', 
		'\x2', 'p', '~', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\x5', '*', '\x16', 
		'\x2', 'r', 's', '\x5', '\x16', '\f', '\x2', 's', 'v', '\a', '\x16', '\x2', 
		'\x2', 't', 'w', '\x5', '\x32', '\x1A', '\x2', 'u', 'w', '\x5', '.', '\x18', 
		'\x2', 'v', 't', '\x3', '\x2', '\x2', '\x2', 'v', 'u', '\x3', '\x2', '\x2', 
		'\x2', 'w', '~', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x5', '(', '\x15', 
		'\x2', 'y', 'z', '\x5', '\x16', '\f', '\x2', 'z', '{', '\a', '(', '\x2', 
		'\x2', '{', '|', '\x5', '\x34', '\x1B', '\x2', '|', '~', '\x3', '\x2', 
		'\x2', '\x2', '}', '\x65', '\x3', '\x2', '\x2', '\x2', '}', 'j', '\x3', 
		'\x2', '\x2', '\x2', '}', 'q', '\x3', '\x2', '\x2', '\x2', '}', 'x', '\x3', 
		'\x2', '\x2', '\x2', '~', '\x13', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'\x80', '\t', '\x2', '\x2', '\x2', '\x80', '\x83', '\a', '.', '\x2', '\x2', 
		'\x81', '\x83', '\t', '\x2', '\x2', '\x2', '\x82', '\x7F', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x81', '\x3', '\x2', '\x2', '\x2', '\x83', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\t', '\x3', '\x2', '\x2', 
		'\x85', '\x17', '\x3', '\x2', '\x2', '\x2', '\x86', '\x8D', '\x5', '\"', 
		'\x12', '\x2', '\x87', '\x8D', '\x5', '$', '\x13', '\x2', '\x88', '\x8D', 
		'\x5', '&', '\x14', '\x2', '\x89', '\x8D', '\x5', '*', '\x16', '\x2', 
		'\x8A', '\x8D', '\x5', '(', '\x15', '\x2', '\x8B', '\x8D', '\x5', '\x1A', 
		'\xE', '\x2', '\x8C', '\x86', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x87', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x88', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8A', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x8E', '\x93', '\a', '\x1F', '\x2', '\x2', 
		'\x8F', '\x90', '\a', '\x1F', '\x2', '\x2', '\x90', '\x91', '\a', '\x13', 
		'\x2', '\x2', '\x91', '\x93', '\a', '\x1F', '\x2', '\x2', '\x92', '\x8E', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x8F', '\x3', '\x2', '\x2', '\x2', 
		'\x93', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x94', '\x97', '\x5', '\x1E', 
		'\x10', '\x2', '\x95', '\x97', '\x5', ' ', '\x11', '\x2', '\x96', '\x94', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\x95', '\x3', '\x2', '\x2', '\x2', 
		'\x97', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\x5', '\x18', 
		'\r', '\x2', '\x99', '\x9A', '\t', '\x4', '\x2', '\x2', '\x9A', '\x9B', 
		'\t', '\x5', '\x2', '\x2', '\x9B', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '\x9D', '\x5', '\x18', '\r', '\x2', '\x9D', '\x9E', '\a', '\x14', 
		'\x2', '\x2', '\x9E', '\x9F', '\a', '\x1B', '\x2', '\x2', '\x9F', '\xA0', 
		'\a', '\x15', '\x2', '\x2', '\xA0', '\xA7', '\x3', '\x2', '\x2', '\x2', 
		'\xA1', '\xA2', '\x5', '\x18', '\r', '\x2', '\xA2', '\xA3', '\a', '%', 
		'\x2', '\x2', '\xA3', '\xA4', '\a', '\'', '\x2', '\x2', '\xA4', '\xA5', 
		'\a', '&', '\x2', '\x2', '\xA5', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA6', 
		'\x9C', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\xA7', '!', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA9', '\t', 
		'\x6', '\x2', '\x2', '\xA9', '#', '\x3', '\x2', '\x2', '\x2', '\xAA', 
		'\xAB', '\t', '\a', '\x2', '\x2', '\xAB', '%', '\x3', '\x2', '\x2', '\x2', 
		'\xAC', '\xAD', '\t', '\b', '\x2', '\x2', '\xAD', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\xAE', '\xAF', '\a', '\x10', '\x2', '\x2', '\xAF', ')', 
		'\x3', '\x2', '\x2', '\x2', '\xB0', '\xB1', '\a', '\x3', '\x2', '\x2', 
		'\xB1', '+', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', '\t', '\t', '\x2', 
		'\x2', '\xB3', '-', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB6', '\x5', 
		',', '\x17', '\x2', '\xB5', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB5', 
		'\xB6', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\x3', '\x2', '\x2', 
		'\x2', '\xB7', '\xB8', '\a', '\x1B', '\x2', '\x2', '\xB8', '/', '\x3', 
		'\x2', '\x2', '\x2', '\xB9', '\xBB', '\x5', ',', '\x17', '\x2', '\xBA', 
		'\xB9', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', '\x3', '\x2', '\x2', 
		'\x2', '\xBB', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', '\a', 
		'\x1C', '\x2', '\x2', '\xBD', '\x31', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'\xBF', '\t', '\n', '\x2', '\x2', '\xBF', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\xC0', '\xC1', '\a', ',', '\x2', '\x2', '\xC1', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x11', '\x39', 'N', 'Z', '\\', '\x61', 'o', 'v', 
		'}', '\x82', '\x8C', '\x92', '\x96', '\xA6', '\xB5', '\xBA',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Joanneum.Robotics.Ros.MessageParser.Antlr
